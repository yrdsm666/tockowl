// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: tockowl.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// provable broadcast
type Value struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Value            []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`           // paload
	Validation       []byte                 `protobuf:"bytes,2,opt,name=validation,proto3" json:"validation,omitempty"` // for external validating
	ParentValueHash  []byte                 `protobuf:"bytes,3,opt,name=parentValueHash,proto3" json:"parentValueHash,omitempty"`
	ParentValueSig   []byte                 `protobuf:"bytes,4,opt,name=parentValueSig,proto3" json:"parentValueSig,omitempty"`
	ParentValueOwner uint32                 `protobuf:"varint,5,opt,name=parentValueOwner,proto3" json:"parentValueOwner,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_tockowl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{0}
}

func (x *Value) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Value) GetValidation() []byte {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *Value) GetParentValueHash() []byte {
	if x != nil {
		return x.ParentValueHash
	}
	return nil
}

func (x *Value) GetParentValueSig() []byte {
	if x != nil {
		return x.ParentValueSig
	}
	return nil
}

func (x *Value) GetParentValueOwner() uint32 {
	if x != nil {
		return x.ParentValueOwner
	}
	return 0
}

type Echo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sigshare      []byte                 `protobuf:"bytes,1,opt,name=sigshare,proto3" json:"sigshare,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Echo) Reset() {
	*x = Echo{}
	mi := &file_tockowl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Echo) ProtoMessage() {}

func (x *Echo) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Echo.ProtoReflect.Descriptor instead.
func (*Echo) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{1}
}

func (x *Echo) GetSigshare() []byte {
	if x != nil {
		return x.Sigshare
	}
	return nil
}

type Lock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Replica       uint32                 `protobuf:"varint,1,opt,name=replica,proto3" json:"replica,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Sig           []byte                 `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Lock) Reset() {
	*x = Lock{}
	mi := &file_tockowl_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lock) ProtoMessage() {}

func (x *Lock) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lock.ProtoReflect.Descriptor instead.
func (*Lock) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{2}
}

func (x *Lock) GetReplica() uint32 {
	if x != nil {
		return x.Replica
	}
	return 0
}

func (x *Lock) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Lock) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type Finish struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Sig           []byte                 `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Finish) Reset() {
	*x = Finish{}
	mi := &file_tockowl_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Finish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finish) ProtoMessage() {}

func (x *Finish) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finish.ProtoReflect.Descriptor instead.
func (*Finish) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{3}
}

func (x *Finish) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Finish) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type Done struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CoinShare     []byte                 `protobuf:"bytes,1,opt,name=coinShare,proto3" json:"coinShare,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Done) Reset() {
	*x = Done{}
	mi := &file_tockowl_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Done) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Done) ProtoMessage() {}

func (x *Done) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Done.ProtoReflect.Descriptor instead.
func (*Done) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{4}
}

func (x *Done) GetCoinShare() []byte {
	if x != nil {
		return x.CoinShare
	}
	return nil
}

type Halt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Replica       uint32                 `protobuf:"varint,1,opt,name=replica,proto3" json:"replica,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Sig           []byte                 `protobuf:"bytes,3,opt,name=sig,proto3" json:"sig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Halt) Reset() {
	*x = Halt{}
	mi := &file_tockowl_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Halt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Halt) ProtoMessage() {}

func (x *Halt) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Halt.ProtoReflect.Descriptor instead.
func (*Halt) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{5}
}

func (x *Halt) GetReplica() uint32 {
	if x != nil {
		return x.Replica
	}
	return 0
}

func (x *Halt) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Halt) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type Best struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxValue      []byte                 `protobuf:"bytes,1,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	MaxValueOwner uint32                 `protobuf:"varint,2,opt,name=maxValueOwner,proto3" json:"maxValueOwner,omitempty"`
	MaxQ1Sig      []byte                 `protobuf:"bytes,3,opt,name=maxQ1Sig,proto3" json:"maxQ1Sig,omitempty"`
	MaxQ1Value    []byte                 `protobuf:"bytes,4,opt,name=maxQ1Value,proto3" json:"maxQ1Value,omitempty"`
	MaxQ1Owner    uint32                 `protobuf:"varint,5,opt,name=maxQ1Owner,proto3" json:"maxQ1Owner,omitempty"`
	MaxQ2Sig      []byte                 `protobuf:"bytes,6,opt,name=maxQ2Sig,proto3" json:"maxQ2Sig,omitempty"`
	MaxQ2Value    []byte                 `protobuf:"bytes,7,opt,name=maxQ2Value,proto3" json:"maxQ2Value,omitempty"`
	MaxQ2Owner    uint32                 `protobuf:"varint,8,opt,name=maxQ2Owner,proto3" json:"maxQ2Owner,omitempty"`
	MaxQ3Sig      []byte                 `protobuf:"bytes,9,opt,name=maxQ3Sig,proto3" json:"maxQ3Sig,omitempty"`
	MaxQ3Value    []byte                 `protobuf:"bytes,10,opt,name=maxQ3Value,proto3" json:"maxQ3Value,omitempty"`
	MaxQ3Owner    uint32                 `protobuf:"varint,11,opt,name=maxQ3Owner,proto3" json:"maxQ3Owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Best) Reset() {
	*x = Best{}
	mi := &file_tockowl_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Best) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Best) ProtoMessage() {}

func (x *Best) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Best.ProtoReflect.Descriptor instead.
func (*Best) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{6}
}

func (x *Best) GetMaxValue() []byte {
	if x != nil {
		return x.MaxValue
	}
	return nil
}

func (x *Best) GetMaxValueOwner() uint32 {
	if x != nil {
		return x.MaxValueOwner
	}
	return 0
}

func (x *Best) GetMaxQ1Sig() []byte {
	if x != nil {
		return x.MaxQ1Sig
	}
	return nil
}

func (x *Best) GetMaxQ1Value() []byte {
	if x != nil {
		return x.MaxQ1Value
	}
	return nil
}

func (x *Best) GetMaxQ1Owner() uint32 {
	if x != nil {
		return x.MaxQ1Owner
	}
	return 0
}

func (x *Best) GetMaxQ2Sig() []byte {
	if x != nil {
		return x.MaxQ2Sig
	}
	return nil
}

func (x *Best) GetMaxQ2Value() []byte {
	if x != nil {
		return x.MaxQ2Value
	}
	return nil
}

func (x *Best) GetMaxQ2Owner() uint32 {
	if x != nil {
		return x.MaxQ2Owner
	}
	return 0
}

func (x *Best) GetMaxQ3Sig() []byte {
	if x != nil {
		return x.MaxQ3Sig
	}
	return nil
}

func (x *Best) GetMaxQ3Value() []byte {
	if x != nil {
		return x.MaxQ3Value
	}
	return nil
}

func (x *Best) GetMaxQ3Owner() uint32 {
	if x != nil {
		return x.MaxQ3Owner
	}
	return 0
}

// RBC
type RBCEcho struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	M             []byte                 `protobuf:"bytes,2,opt,name=m,proto3" json:"m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RBCEcho) Reset() {
	*x = RBCEcho{}
	mi := &file_tockowl_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBCEcho) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBCEcho) ProtoMessage() {}

func (x *RBCEcho) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBCEcho.ProtoReflect.Descriptor instead.
func (*RBCEcho) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{7}
}

func (x *RBCEcho) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *RBCEcho) GetM() []byte {
	if x != nil {
		return x.M
	}
	return nil
}

type RBCReady struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	M             []byte                 `protobuf:"bytes,2,opt,name=m,proto3" json:"m,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RBCReady) Reset() {
	*x = RBCReady{}
	mi := &file_tockowl_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBCReady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBCReady) ProtoMessage() {}

func (x *RBCReady) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBCReady.ProtoReflect.Descriptor instead.
func (*RBCReady) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{8}
}

func (x *RBCReady) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *RBCReady) GetM() []byte {
	if x != nil {
		return x.M
	}
	return nil
}

//BA
type BVAL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Owner         uint32                 `protobuf:"varint,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Content       []byte                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BVAL) Reset() {
	*x = BVAL{}
	mi := &file_tockowl_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BVAL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BVAL) ProtoMessage() {}

func (x *BVAL) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BVAL.ProtoReflect.Descriptor instead.
func (*BVAL) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{9}
}

func (x *BVAL) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BVAL) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *BVAL) GetOwner() uint32 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *BVAL) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type AUX struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Owner         uint32                 `protobuf:"varint,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Content       []byte                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AUX) Reset() {
	*x = AUX{}
	mi := &file_tockowl_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AUX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AUX) ProtoMessage() {}

func (x *AUX) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AUX.ProtoReflect.Descriptor instead.
func (*AUX) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{10}
}

func (x *AUX) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *AUX) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *AUX) GetOwner() uint32 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *AUX) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type COIN struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Round         uint32                 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Owner         uint32                 `protobuf:"varint,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Content       []byte                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *COIN) Reset() {
	*x = COIN{}
	mi := &file_tockowl_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *COIN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COIN) ProtoMessage() {}

func (x *COIN) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COIN.ProtoReflect.Descriptor instead.
func (*COIN) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{11}
}

func (x *COIN) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *COIN) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *COIN) GetOwner() uint32 {
	if x != nil {
		return x.Owner
	}
	return 0
}

func (x *COIN) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type STOP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *STOP) Reset() {
	*x = STOP{}
	mi := &file_tockowl_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *STOP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STOP) ProtoMessage() {}

func (x *STOP) ProtoReflect() protoreflect.Message {
	mi := &file_tockowl_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STOP.ProtoReflect.Descriptor instead.
func (*STOP) Descriptor() ([]byte, []int) {
	return file_tockowl_proto_rawDescGZIP(), []int{12}
}

func (x *STOP) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_tockowl_proto protoreflect.FileDescriptor

var file_tockowl_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x74, 0x6f, 0x63, 0x6b, 0x6f, 0x77, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69,
	0x67, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x22, 0x0a,
	0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x67, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x22, 0x48, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0x30, 0x0a, 0x06, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0x24, 0x0a,
	0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x22, 0x48, 0x0a, 0x04, 0x48, 0x61, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0xdc, 0x02,
	0x0a, 0x04, 0x42, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x51,
	0x31, 0x53, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51,
	0x31, 0x53, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x31, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x31, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x31, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x31, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x32, 0x53, 0x69, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x32, 0x53, 0x69, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x32, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x32, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x33, 0x53, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x51, 0x33, 0x53, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x51, 0x33, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x33, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x51, 0x33, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51, 0x33, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x07,
	0x52, 0x42, 0x43, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x6d, 0x22, 0x2c, 0x0a, 0x08, 0x52, 0x42, 0x43,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x6d, 0x22, 0x60, 0x0a, 0x04, 0x42, 0x56, 0x41, 0x4c, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x03, 0x41, 0x55, 0x58,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x04, 0x43, 0x4f,
	0x49, 0x4e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x0a, 0x04,
	0x53, 0x54, 0x4f, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0b,
	0x5a, 0x09, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tockowl_proto_rawDescOnce sync.Once
	file_tockowl_proto_rawDescData = file_tockowl_proto_rawDesc
)

func file_tockowl_proto_rawDescGZIP() []byte {
	file_tockowl_proto_rawDescOnce.Do(func() {
		file_tockowl_proto_rawDescData = protoimpl.X.CompressGZIP(file_tockowl_proto_rawDescData)
	})
	return file_tockowl_proto_rawDescData
}

var file_tockowl_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tockowl_proto_goTypes = []any{
	(*Value)(nil),    // 0: Value
	(*Echo)(nil),     // 1: Echo
	(*Lock)(nil),     // 2: Lock
	(*Finish)(nil),   // 3: Finish
	(*Done)(nil),     // 4: Done
	(*Halt)(nil),     // 5: Halt
	(*Best)(nil),     // 6: Best
	(*RBCEcho)(nil),  // 7: RBCEcho
	(*RBCReady)(nil), // 8: RBCReady
	(*BVAL)(nil),     // 9: BVAL
	(*AUX)(nil),      // 10: AUX
	(*COIN)(nil),     // 11: COIN
	(*STOP)(nil),     // 12: STOP
}
var file_tockowl_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tockowl_proto_init() }
func file_tockowl_proto_init() {
	if File_tockowl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tockowl_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tockowl_proto_goTypes,
		DependencyIndexes: file_tockowl_proto_depIdxs,
		MessageInfos:      file_tockowl_proto_msgTypes,
	}.Build()
	File_tockowl_proto = out.File
	file_tockowl_proto_rawDesc = nil
	file_tockowl_proto_goTypes = nil
	file_tockowl_proto_depIdxs = nil
}
